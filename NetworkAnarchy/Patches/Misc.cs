using ColossalFramework;
using HarmonyLib;

namespace NetworkAnarchy.Patches
{
    class Utils
    {
        /// <summary>
        /// Remove building limiting errors for networks
        /// </summary>
        /// <param name="errors">The errors generated by the vanilla game</param>
        /// <returns>The pruned down errors</returns>
        internal static ToolBase.ToolErrors YeetLimits(ToolBase.ToolErrors errors)
        {
            if (NetworkAnarchy.Anarchy)
            {
                errors &= ~ToolBase.ToolErrors.CanalTooClose;
                errors &= ~ToolBase.ToolErrors.CannotBuildOnWater;
                errors &= ~ToolBase.ToolErrors.HeightTooHigh;
                errors &= ~ToolBase.ToolErrors.ShoreNotFound;
                errors &= ~ToolBase.ToolErrors.SlopeTooSteep;
                errors &= ~ToolBase.ToolErrors.WaterNotFound;
            }
            return errors;
        }
    }

    [HarmonyPatch(typeof(PublicTransportPanel), "IsRoadEligibleToPublicTransport")]
    public static class PTP_IsRoadEligibleToPublicTransport
    {
        public static bool Prefix(ref PublicTransportPanel __instance, ref bool __result, NetInfo info)
        {
            if (__instance.category == "PublicTransportShip")
            {
                __result = (info.m_vehicleTypes & (VehicleInfo.VehicleType.Ferry | VehicleInfo.VehicleType.Ship)) != VehicleInfo.VehicleType.None;
                return false;
            }
            if (__instance.category == "PublicTransportPlane")
            {
                __result = (info.m_vehicleTypes & (VehicleInfo.VehicleType.Helicopter | VehicleInfo.VehicleType.Blimp | VehicleInfo.VehicleType.Plane)) != VehicleInfo.VehicleType.None;
                return false;
            }
            return true;
        }
    }

    /// <summary>
    /// Show the Airplane paths (purple dotted lines)
    /// </summary>
    [HarmonyPatch(typeof(DefaultTool), "GetService")]
    public static class DT_GetService
    {
        public static void Postfix(ref ToolBase.RaycastService __result)
        {
            if (!NetworkAnarchy.InGame()) return;

            if (Singleton<InfoManager>.instance.CurrentMode == InfoManager.InfoMode.Transport)
            {
                __result.m_itemLayers |= ItemClass.Layer.AirplanePaths;
            }
        }
    }

    /// <summary>
    /// Allow ship and airplane paths to be built outside the purchased tiles
    /// </summary>
    [HarmonyPatch(typeof(GameAreaManager), "QuadOutOfArea")]
    public static class GAM_QuadOutOfArea
    {
        public static bool Prefix(ref bool __result)
        {
            if (!(Singleton<ToolController>.instance.CurrentTool is NetTool)) return true;

            NetTool netTool = (NetTool)Singleton<ToolController>.instance.CurrentTool;
            NetInfo prefab = netTool.Prefab;

            if (prefab.name == "Ship Path" || prefab.name == "Airplane Path")
            {
                __result = false;
                return false;
            }
            return true;
        }
    }
}
